<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Filterable Spreadsheet</title>
    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css"
    />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <style>
      table.dataTable td {
        white-space: nowrap; /* prevent wrapping if commas exist */
      }
    </style>
  </head>
  <body>
    <h2>Spreadsheet with Filters</h2>
    <table id="sheet-table" class="display"></table>

    <script>
      function escapeHTML(str) {
        if (!str) return "";
        return str
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }

      fetch("https://fowp.glyphji.com/Fowp.xlsx")
        .then((res) => res.arrayBuffer())
        .then((ab) => {
          const workbook = XLSX.read(ab, { type: "array" });
          const sheetName = "Final";
          const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {
            header: 1,
            blankrows: false,
          });

          console.log("Raw data from sheet:", data.slice(0, 5));

          if (!data.length) {
            console.error("No data found in sheet");
            return;
          }

          const columnCount = Math.max(...data.map((row) => row.length));
          alert(columnCount);
          // Normalize all rows
          const normalizedData = data.map((row) => {
            const r = row.map((c) =>
              c !== undefined && c !== null ? String(c).trim() : "(empty)"
            );
            while (r.length < columnCount) r.push("");
            return r.slice(0, columnCount);
          });

          // Remove duplicate header row if exists
          const firstRow = normalizedData[0];
          const secondRow = normalizedData[1] || [];
          const rowsEqual =
            secondRow.length === firstRow.length &&
            secondRow.every(
              (cell, i) =>
                firstRow[i].replace(/\s+/g, "") === cell.replace(/\s+/g, "")
            );
          if (rowsEqual) normalizedData.splice(1, 1);

          // Build table HTML with escaped content
          const thead =
            "<thead><tr>" +
            normalizedData[0]
              .map((cell) => `<th>${escapeHTML(cell)}</th>`)
              .join("") +
            "</tr></thead>";

          const tbody =
            "<tbody>" +
            normalizedData
              .slice(1)
              .map(
                (row) =>
                  "<tr>" +
                  row.map((cell) => `<td>${escapeHTML(cell)}</td>`).join("") +
                  "</tr>"
              )
              .join("") +
            "</tbody>";

          document.getElementById("sheet-table").innerHTML = thead + tbody;

          // Initialize DataTables
          $(document).ready(function () {
            $("#sheet-table").DataTable({
              pageLength: 25,
              scrollX: true,
            });
          });
        });
    </script>
  </body>
</html>
